{"version":3,"sources":["components/tasksTable.tsx","services/AuthService.ts","services/TaskService.ts","components/tasksList.tsx","components/home.tsx","services/UserService.ts","components/register.tsx","components/login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TasksTableHead","TableHead","TableRow","StyledTableCell","key","withStyles","theme","createStyles","head","backgroundColor","palette","primary","main","color","common","white","textTransform","body","fontSize","TableCell","useStyles","makeStyles","root","width","alignItems","marginTop","spacing","paper","minWidth","overflowX","marginBottom","table","visuallyHidden","border","clip","height","margin","overflow","padding","position","top","useTextStyles","disabledInput","text","input","TasksTable","props","classes","textClasses","React","useState","editableTaskId","setEditableTaskId","tasks","taskKeys","saveTask","id","task","find","t","_id","onSave","className","Paper","TableContainer","Table","aria-labelledby","size","TableBody","map","row","index","isDisable","rowId","hover","role","i","TextField","onChange","e","value","onEdit","editTask","target","disabled","InputProps","disableUnderline","onClick","data","onDelete","authHeader","accessToken","sessionStorage","getItem","taskUrl","process","createTask","axios","post","headers","deleteTasks","a","delete","then","response","catch","err","console","log","updateTask","put","TasksList","setTasks","useEffect","initializeData","getTasks","get","deleteTask","filter","TaskApi","newTask","slice","Grid","container","direction","justify","item","xs","Button","variant","createDate","email","phone","userName","p","secondary","Home","history","useHistory","clear","push","userUrl","display","flexDirection","form","submit","Register","password","user","setUser","roles","required","fullWidth","label","name","autoComplete","type","select","helperText","option","MenuItem","AuthApi","Link","href","Login","setItem","App","path","component","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cc8b7e73.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Table, TableContainer, TableBody, TableHead, TableCell, withStyles, TextField } from '@material-ui/core';\nimport { TableProps } from './tasksList';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DoneTwoToneIcon from '@material-ui/icons/DoneTwoTone';\nimport EditIcon from '@material-ui/icons/Edit';\n\n\nconst TasksTableHead = () => {\n    return (\n        <TableHead>\n            <TableRow>\n                <StyledTableCell\n                    key=\"userName\">\n                    User name\n                </StyledTableCell>\n                <StyledTableCell\n                    key=\"phone\">\n                    Phone number\n                </StyledTableCell>\n                <StyledTableCell\n                    key=\"email\">\n                    Email\n                </StyledTableCell>\n                <StyledTableCell>\n                </StyledTableCell>\n            </TableRow>\n        </TableHead>\n    );\n}\n\nconst StyledTableCell = withStyles((theme: Theme) =>\n    createStyles({\n        head: {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white,\n            textTransform: \"capitalize\"\n        },\n        body: {\n            fontSize: 14,\n        },\n    }),\n)(TableCell);\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            alignItems: 'center',\n            marginTop: theme.spacing(3)\n        },\n        paper: {\n            width: '100%',\n            minWidth: 750,\n            overflowX: 'auto',\n            marginBottom: theme.spacing(2)\n        },\n        table: {\n            minWidth: 750,\n        },\n        visuallyHidden: {\n            border: 0,\n            clip: 'rect(0 0 0 0)',\n            height: 1,\n            margin: -1,\n            overflow: 'hidden',\n            padding: 0,\n            position: 'absolute',\n            top: 20,\n            width: 1,\n        },\n    }),\n);\n\nconst useTextStyles = makeStyles(theme => ({\n    disabledInput: {\n        color: theme.palette.text.primary,\n    },\n    input: {\n        color: theme.palette.text.primary,\n    }\n}));\n\nconst TasksTable = (props: TableProps) => {\n\n    const classes = useStyles();\n    const textClasses = useTextStyles();\n    const [editableTaskId, setEditableTaskId] = React.useState<string>();\n    const { tasks } = props;\n    const taskKeys = ['userName', 'phone', 'email'];\n\n    const deleteTask = (data: any) => {\n        props.onDelete([data._id]);\n    }\n\n    const saveTask = () => {\n        const id = editableTaskId || '';\n        const task = tasks.find((t) => t._id == id);\n        props.onSave(task);\n        setEditableTaskId('');\n    }\n\n    const editTask = (value: string, key: string, row: any) => {\n        row[key] = value;\n        props.onEdit(row);\n    }\n\n    const setRowEditable = (data: any) => {\n        setEditableTaskId(data._id);\n    }\n\n    const isEditable = (id: string) => editableTaskId === id || id == '';\n\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper} >\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size=\"small\">\n                        <TasksTableHead />\n                        <TableBody>\n                            {tasks.map((row, index) => {\n                                const isDisable = !isEditable(row._id);\n                                const rowId = `row-${index}`;\n                                return (\n                                    <TableRow\n                                        hover\n                                        role=\"checkbox\"\n                                        key={rowId}>\n                                        {taskKeys.map((key, i) =>\n                                            (<TableCell key={`row-${i}`}>\n                                                <TextField onChange={e => editTask(e.target.value, key, row)} value={row[key]} disabled={isDisable} InputProps={{\n                                                    disableUnderline: isDisable,\n                                                    classes: { disabled: textClasses.disabledInput }\n                                                }} />\n                                            </TableCell>\n                                            ))}\n                                        <TableCell>\n                                            {isDisable ? (<div><DeleteIcon onClick={e => deleteTask(row)}></DeleteIcon>\n                                                <EditIcon onClick={e => setRowEditable(row)}></EditIcon></div>) : (\n                                                    <DoneTwoToneIcon onClick={saveTask}></DoneTwoToneIcon>)}\n                                        </TableCell>\n                                    </TableRow>);\n                            })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Paper>\n        </div >);\n}\n\nexport default TasksTable;","const authHeader = () => {\r\n    const accessToken = sessionStorage.getItem('accessToken');\r\n    if (accessToken) {\r\n        return { 'accessToken': accessToken };\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\nconst isAuthenticated = () => {\r\n    const accessToken = sessionStorage.getItem('accessToken');\r\n    return accessToken != null;\r\n}\r\n\r\n\r\nexport {\r\n    authHeader,\r\n    isAuthenticated\r\n};\r\n","import axios, { AxiosResponse } from 'axios';\nimport { task } from '../types/task';\nimport { authHeader } from './AuthService';\n\n\nconst url = process.env.REACT_APP_API_URL as string;\nconst taskUrl = `${url}/task`;\n\nconst getTasks = () => {\n    return axios.get<task[]>(`${taskUrl}`, {\n        headers: authHeader()\n    })\n}\n\nconst createTask = (task: task) => {\n    return axios.post<task>(taskUrl, {\n        task\n    }, {\n        headers: authHeader()\n    })\n}\n\nconst deleteTasks = async (id: string) => {\n    axios.delete<any>(`${taskUrl}/${id}`, { headers: authHeader() })\n        .then((response: AxiosResponse) => {\n        }).catch((err) => {\n            console.log(err)\n        })\n}\n\nconst updateTask = async (task: task) => {\n    axios.put<task[]>(`${taskUrl}/${task._id}`, {\n        task\n    }, {\n        headers: authHeader()\n    }).then((response: AxiosResponse) => {\n    }).catch((err) => {\n        console.log(err)\n    });\n}\n\nexport {\n    createTask,\n    getTasks,\n    deleteTasks,\n    updateTask\n};\n","import React, { useState, useEffect } from 'react';\nimport TasksTable from './tasksTable';\nimport { task } from '../types/task';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Button } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as TaskApi from '../services/TaskService';\n\n\nexport interface TableProps {\n    tasks: any[];\n    onDelete: any;\n    onEdit: any;\n    onSave: any;\n}\n\nexport const TasksList = () => {\n\n    const [tasks, setTasks] = useState<task[]>([]);\n\n\n    useEffect(() => {\n        initializeData();\n    }, []);\n\n    const initializeData = async () => {\n        await getTasks();\n    }\n\n    const getTasks = async () => {\n        TaskApi.getTasks()\n            .then(({ data }) => {\n                setTasks(tasks => [...data]);\n            }).catch((err) => {\n                console.log(err)\n            });\n    }\n\n    const deleteTask = async (id: string) => {\n        setTasks(tasks => [...tasks.filter(({ _id }) => _id != id)]);\n        await TaskApi.deleteTasks(id);\n    }\n\n    const saveTask = async (task: task) => {\n        if (task._id == '') {\n            const newTask = (await TaskApi.createTask(task)).data;\n            setTasks(tasks => [\n                newTask,\n                ...tasks.slice(1)\n            ]);\n        }\n        else await TaskApi.updateTask(task);\n    }\n\n    const editTask = (task: any) => {\n        setTasks([...tasks.map((p) => {\n            if (p._id === task._id) return task;\n            return p;\n        })])\n    }\n\n    const create = () => {\n        const newTask = { _id: '', createDate: '', email: '', phone: '', userName: '' };\n        setTasks(tasks => [\n            newTask,\n            ...tasks\n        ]);;\n    }\n\n    return (\n        <Grid\n            container\n            spacing={0}\n            direction=\"column\"\n            alignItems=\"center\"\n            justify=\"center\">\n            <Grid item xs={10}>\n                <div className=\"tasks-list\">\n                    <Button variant=\"contained\" color=\"primary\" onClick={create}>\n                        Create task\n            </Button>\n                    <TasksTable tasks={tasks} onDelete={deleteTask}\n                        onSave={saveTask} onEdit={editTask} />\n                </div>\n            </Grid>\n        </Grid>\n    );\n}\n","import React from 'react'; // let's also import Component\nimport { Login } from './login';\nimport { Grid, createMuiTheme, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { TasksList } from './tasksList';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      color: theme.palette.secondary.main\n    },\n    marginTop: theme.spacing(5)\n  },\n}));\n\nexport const Home = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n\n  const signOut = () => {\n    sessionStorage.clear();\n    history.push(\"/login\");\n  }\n\n  return <Grid\n    container\n    spacing={5}\n    direction=\"column\"\n    justify=\"center\"\n    className={classes.root}>\n    <Grid item xs={12} alignItems=\"center\">\n      <Button variant=\"contained\" color=\"primary\" onClick={signOut}>\n        Sign out\n            </Button>\n    </Grid>\n    <Grid item xs={12}>\n      <TasksList />\n    </Grid>\n  </Grid>\n}","import axios, { AxiosResponse } from 'axios';\r\nimport { user } from '../types/user';\r\n\r\nconst url = process.env.REACT_APP_API_URL as string;\r\nconst userUrl = `${url}/user`;\r\n\r\nconst register = (user: user) => {\r\n    return axios.post<any>(userUrl, {\r\n        user\r\n    })\r\n}\r\n\r\n\r\nconst login = (user: user) => {\r\n    return axios.post<any>(`${userUrl}/login`, {\r\n        user\r\n    })\r\n}\r\n\r\n\r\nexport {\r\n    register,\r\n    login\r\n};\r\n","import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button, Grid, Link, MenuItem } from '@material-ui/core';\r\nimport { user } from '../types/user';\r\n// import * as Roles from \"../types/roles\";\r\nimport * as AuthApi from '../services/UserService';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        // width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport const Register = () => {\r\n\r\n\r\n    const [user, setUser] = useState<user>({ email: '', password: '', role: '' });\r\n    const roles = [\"admin\", \"user\"];\r\n    const history = useHistory();\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n\r\n    const register = () => {\r\n        AuthApi.register(user)\r\n            .then(({ data }) => {\r\n                history.push(\"/login\")\r\n\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={0}\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n            className=\"home-container\"\r\n        >\r\n            <Grid item xs={12}>\r\n                <div className={classes.form}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        value={user.email}\r\n                        onChange={e => setUser({ ...user, email: e.target.value })}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={user.password}\r\n                        onChange={e => setUser({ ...user, password: e.target.value })}\r\n                    />\r\n                    <TextField\r\n                        fullWidth\r\n                        name=\"role\"\r\n                        id=\"standard-select-currency\"\r\n                        select\r\n                        label=\"Select role\"\r\n                        value={roles[0]}\r\n                        onChange={e => setUser({ ...user, role: e.target.value })}\r\n                        helperText=\"Role\">\r\n                        {roles.map((option) => (\r\n                            <MenuItem key={option} value={option}>\r\n                                {option}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </TextField>\r\n                    <Button\r\n                        onClick={register}\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}>\r\n                        Sign Up\r\n                 </Button>\r\n                    <Grid container>\r\n                        <Grid item>\r\n                            <Link href=\"login\" variant=\"body2\">\r\n                                {\"Already have an account? Sign In\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button, Grid, Link } from '@material-ui/core';\r\nimport { user } from '../types/user';\r\n\r\nimport * as AuthApi from '../services/UserService';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            color: theme.palette.secondary.main\r\n        },\r\n    }, paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport const Login = () => {\r\n\r\n\r\n    const [user, setUser] = useState<user>({ email: '', password: '', role: '' });\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n\r\n    const login = () => {\r\n        AuthApi.login(user)\r\n            .then(({ data }) => {\r\n                sessionStorage.setItem(\"accessToken\", data.accessToken);\r\n                history.push(\"/tasks\");\r\n            }).catch((err) => {\r\n                console.log(err)\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={0}\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n            className=\"home-container\">\r\n            <Grid item xs={6} className={classes.root}>\r\n                <h1>Welcome to propit!</h1>\r\n                <h4>please login to start manage your tasks</h4>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <div className={classes.form}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        name=\"email\"\r\n                        autoComplete=\"email\"\r\n                        value={user.email}\r\n                        onChange={e => setUser({ ...user, email: e.target.value })} />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        value={user.password}\r\n                        onChange={e => setUser({ ...user, password: e.target.value })}\r\n                    />\r\n                    <Button\r\n                        onClick={login}\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}>\r\n                        Sign In\r\n          </Button>\r\n                    <Grid container>\r\n                        <Grid item>\r\n                            <Link href=\"signup\" variant=\"body2\">\r\n                                {\"Don't have an account? Sign Up\"}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Grid>\r\n        </Grid >\r\n\r\n    );\r\n}","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { Home } from './components/home';\nimport { TasksList } from './components/tasksList';\nimport { Register } from './components/register';\nimport { Login } from './components/login';\nimport { isAuthenticated } from './services/AuthService';\n\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/signup\" component={Register} exact />\n        <Route path=\"/login\" component={Login} exact />\n        <Route path=\"/tasks\" component={Home} />\n        <Route\n          exact\n          path=\"*\"\n          render={props =>\n            isAuthenticated() ? (<Home />)\n              : (\n                <Login />)} />)}/>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}